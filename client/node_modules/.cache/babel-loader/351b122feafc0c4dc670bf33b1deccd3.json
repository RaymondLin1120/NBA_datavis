{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PlayerProfile from './PlayerProfile';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats';\nconst Player_Query = gql`\n    query PlayerQuery ($playerName: String!) {\n        historicStats (playerName: $playerName) {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo (playerName: $playerName) {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n        currentStats {\n            playerId\n            playerName\n            teamId\n            teamAbbreviation\n            age\n            gp\n            w\n            l\n            wPct\n            min\n            fgm\n            fga\n            fgPct\n            fG3M\n            fG3A\n            fg3Pct\n            ftm\n            fta\n            ftPct\n            oreb\n            dreb\n            reb\n            ast\n            tov\n            stl\n            blk\n            blka\n            pf\n            pfd\n            pts\n            plusMinus\n            nbaFantasyPts\n            dD2\n            tD3\n            gpRank\n            wRank\n            lRank\n            wPctRank\n            minRank\n            fgmRank\n            fgaRank\n            fgPctRank\n            fg3mRank\n            fg3aRank\n            fg3PctRank\n            ftmRank\n            ftaRank\n            ftPctRank\n            orebRank\n            drebRank\n            rebRank\n            astRank\n            tovRank\n            stlRank\n            blkRank\n            blkaRank\n            pfRank\n            pfdRank\n            ptsRank\n            plusMinusRank\n            nbaFantasyPtsRank\n            dd2Rank\n            td3Rank\n          }\n          leagueGameLog(playerName: $playerName) {\n            resource,\n            parameters {\n              LeagueID\n              Season\n              SeasonType\n              PlayerOrTeam\n              Counter\n              Sorter\n              Direction\n              DateFrom\n              DateTo\n            },\n            resultSets {\n              name\n              headers\n              rowSet\n            }\n        }\n    }\n`;\n\nfunction Player() {\n  _s();\n\n  const [seasonStats, setSeasonStats] = useState([]);\n  const [playerInfo, setPlayerInfo] = useState([]);\n  const [playerGames, setPlayerGames] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState(\"Bradley Beal\");\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Player_Query, {\n    variables: {\n      playerName: currentPlayer\n    }\n  });\n  const [dataLoaded, setDataLoaded] = useState(false);\n  var temp_arr = [];\n  useEffect(() => {\n    if (!loading) {\n      temp_arr = data['historicStats'].filter(item => item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\" || item.seasonId !== \"2020-21\");\n      setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length));\n      setPlayerInfo(data['playerInfo']);\n      setPlayerGames(data['leagueGameLog']);\n      console.log(temp_arr);\n      setDataLoaded(true);\n    }\n  }, [data, playerName]);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`; // const LoadData = () => {\n  //     const { loading, error, data } = useQuery(Player_Query);\n  //     if (!loading) {\n  //         temp_arr = data['historicStats'].filter((item) =>\n  //             (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n  //             item.seasonId !== \"2020-21\"\n  //         )\n  //         setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n  //         setPlayerInfo(data['playerInfo'])\n  //     }\n  // }\n  // useEffect(() => {\n  //     async function anyNameFunction() {\n  //         await LoadData();\n  //     }\n  //     anyNameFunction();\n  // }, []);\n  // // const arr = [\n  // //     {\n  // //         fgPct:{subject:\"Field-Goal-%\"},\n  // //         //pg3Pct:{subject:\"3s-%\"},\n  // //         ftPct:{subject:\"Free-Throw-%\"},\n  // //         fG3M:{subject:\"3s-%\"},\n  // //         pts:{subject:\"Points\"},\n  // //         min:{subject:\"Minutes\"},\n  // //         reb:{subject:\"Rebounds\"},\n  // //         ast:{subject:\"Assists\"},\n  // //         stl:{subject:\"Steals\"},\n  // //         blk:{subject:\"Blocks\"},\n  // //         tov:{subject:\"Turnovers\"}\n  // //     }   \n  // // ]\n  //console.log(Object.keys(seasonStats[0]))\n\n  /*     seasonStats.map((item, key) => (\n          //arr[0].min[item.seasonId] = item.min,\n          arr[0].fgPct[item.seasonId] = item.fgPct,\n          arr[0].ftPct[item.seasonId] = item.ftPct,\n          arr[0].fG3M[item.seasonId] = item.fG3M,\n          //arr[0].pts[item.seasonId] = item.pts,\n          arr[0].reb[item.seasonId] = item.reb,\n          arr[0].ast[item.seasonId] = item.ast,\n          arr[0].stl[item.seasonId] = item.stl,\n          arr[0].blk[item.seasonId] = item.blk,\n          arr[0].tov[item.seasonId] = item.tov\n      )) */\n  //var temp_arr = []\n  // for (const [key, value] of Object.entries(arr[0])) {\n  //     console.log(`key: ${key}, value: ${value}`)\n  //     // temp_arr.push(arr[`${key}`])\n  //     temp_arr.push(arr[0][`${key}`])\n  // }\n  //console.log(seasonStats)\n\n  seasonStats.map(item => temp_arr.push({\n    seasonId: item.seasonId,\n    fgPct: item.fgPct,\n    ftPct: item.ftPct,\n    fG3M: item.fG3M,\n    pts: item.pts,\n    min: item.min,\n    reb: item.reb,\n    ast: item.ast,\n    stl: item.stl,\n    blk: item.blk,\n    tov: item.tov\n  }));\n  console.log(playerInfo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playerDashboard\",\n    children: [dataLoaded && /*#__PURE__*/_jsxDEV(PlayerProfile, {\n      playerInfo: playerInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 28\n    }, this), !dataLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(RadarStats, {\n      config: seasonStats,\n      style: {\n        height: '350px',\n        width: '1050px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"ommiaw/5NmmTMnxnBT63K4cGxt8=\", false, function () {\n  return [useQuery];\n});\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js"],"names":["React","useEffect","useState","PlayerProfile","useQuery","gql","RadarStats","Player_Query","Player","seasonStats","setSeasonStats","playerInfo","setPlayerInfo","playerGames","setPlayerGames","currentPlayer","setCurrentPlayer","loading","error","data","variables","playerName","dataLoaded","setDataLoaded","temp_arr","filter","item","seasonId","teamAbbreviation","slice","length","console","log","message","map","push","fgPct","ftPct","fG3M","pts","min","reb","ast","stl","blk","tov","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PlayerProfile from './PlayerProfile';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats'\n\nconst Player_Query = gql`\n    query PlayerQuery ($playerName: String!) {\n        historicStats (playerName: $playerName) {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo (playerName: $playerName) {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n        currentStats {\n            playerId\n            playerName\n            teamId\n            teamAbbreviation\n            age\n            gp\n            w\n            l\n            wPct\n            min\n            fgm\n            fga\n            fgPct\n            fG3M\n            fG3A\n            fg3Pct\n            ftm\n            fta\n            ftPct\n            oreb\n            dreb\n            reb\n            ast\n            tov\n            stl\n            blk\n            blka\n            pf\n            pfd\n            pts\n            plusMinus\n            nbaFantasyPts\n            dD2\n            tD3\n            gpRank\n            wRank\n            lRank\n            wPctRank\n            minRank\n            fgmRank\n            fgaRank\n            fgPctRank\n            fg3mRank\n            fg3aRank\n            fg3PctRank\n            ftmRank\n            ftaRank\n            ftPctRank\n            orebRank\n            drebRank\n            rebRank\n            astRank\n            tovRank\n            stlRank\n            blkRank\n            blkaRank\n            pfRank\n            pfdRank\n            ptsRank\n            plusMinusRank\n            nbaFantasyPtsRank\n            dd2Rank\n            td3Rank\n          }\n          leagueGameLog(playerName: $playerName) {\n            resource,\n            parameters {\n              LeagueID\n              Season\n              SeasonType\n              PlayerOrTeam\n              Counter\n              Sorter\n              Direction\n              DateFrom\n              DateTo\n            },\n            resultSets {\n              name\n              headers\n              rowSet\n            }\n        }\n    }\n`\nfunction Player() {\n    const [seasonStats, setSeasonStats] = useState([])\n    const [playerInfo, setPlayerInfo] = useState([])\n    const [playerGames, setPlayerGames] = useState([])\n    const [currentPlayer, setCurrentPlayer] = useState(\"Bradley Beal\")\n    const { loading, error, data } = useQuery(Player_Query, {\n        variables: {playerName: currentPlayer}\n    });\n    const [dataLoaded, setDataLoaded] = useState(false);\n    \n    \n    var temp_arr = []\n    useEffect(() => {\n        if (!loading) {\n            temp_arr = data['historicStats'].filter((item) =>\n                (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n                item.seasonId !== \"2020-21\"\n            )\n            setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n            setPlayerInfo(data['playerInfo'])\n            setPlayerGames(data['leagueGameLog'])\n            console.log(temp_arr)\n            setDataLoaded(true);\n        }\n    }, [data, playerName]);\n    \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    // const LoadData = () => {\n    //     const { loading, error, data } = useQuery(Player_Query);\n    //     if (!loading) {\n    //         temp_arr = data['historicStats'].filter((item) =>\n    //             (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n    //             item.seasonId !== \"2020-21\"\n    //         )\n    //         setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n    //         setPlayerInfo(data['playerInfo'])\n    //     }\n    // }\n    // useEffect(() => {\n    //     async function anyNameFunction() {\n    //         await LoadData();\n    //     }\n    //     anyNameFunction();\n    // }, []);\n    // // const arr = [\n    // //     {\n    // //         fgPct:{subject:\"Field-Goal-%\"},\n    // //         //pg3Pct:{subject:\"3s-%\"},\n    // //         ftPct:{subject:\"Free-Throw-%\"},\n    // //         fG3M:{subject:\"3s-%\"},\n    // //         pts:{subject:\"Points\"},\n    // //         min:{subject:\"Minutes\"},\n    // //         reb:{subject:\"Rebounds\"},\n    // //         ast:{subject:\"Assists\"},\n    // //         stl:{subject:\"Steals\"},\n    // //         blk:{subject:\"Blocks\"},\n    // //         tov:{subject:\"Turnovers\"}\n    // //     }   \n    // // ]\n\n    //console.log(Object.keys(seasonStats[0]))\n\n/*     seasonStats.map((item, key) => (\n        //arr[0].min[item.seasonId] = item.min,\n        arr[0].fgPct[item.seasonId] = item.fgPct,\n        arr[0].ftPct[item.seasonId] = item.ftPct,\n        arr[0].fG3M[item.seasonId] = item.fG3M,\n        //arr[0].pts[item.seasonId] = item.pts,\n        arr[0].reb[item.seasonId] = item.reb,\n        arr[0].ast[item.seasonId] = item.ast,\n        arr[0].stl[item.seasonId] = item.stl,\n        arr[0].blk[item.seasonId] = item.blk,\n        arr[0].tov[item.seasonId] = item.tov\n    )) */\n\n    //var temp_arr = []\n    // for (const [key, value] of Object.entries(arr[0])) {\n    //     console.log(`key: ${key}, value: ${value}`)\n    //     // temp_arr.push(arr[`${key}`])\n    //     temp_arr.push(arr[0][`${key}`])\n    // }\n    //console.log(seasonStats)\n    seasonStats.map((item) => (\n        temp_arr.push({\n            seasonId: item.seasonId,\n            fgPct: item.fgPct,\n            ftPct: item.ftPct,\n            fG3M: item.fG3M,\n            pts:item.pts,\n            min: item.min,\n            reb: item.reb,\n            ast: item.ast,\n            stl: item.stl,\n            blk: item.blk,\n            tov: item.tov\n        })\n    ))\n\n    console.log(playerInfo)\n\n    return (\n        <div className=\"playerDashboard\">\n            {dataLoaded && <PlayerProfile playerInfo={playerInfo}/>}\n            { !dataLoaded && <div>Loading</div> }\n            <RadarStats config = {seasonStats} style = {{height:'350px', width:'1050px'}}/> \n        </div>\n    )\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}