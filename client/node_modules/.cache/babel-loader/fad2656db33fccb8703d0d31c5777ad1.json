{"ast":null,"code":"var API_v1_2 = require('./API_v1_2');\n\nvar util = require('util'); // Public Functions\n\n\nvar API_v2_0 = function (v, storeT, storeL) {\n  API_v1_2.apply(this, arguments);\n  this.baseUrl = \"https://api.mysportsfeeds.com/v2.0/pull\";\n  this.feeds = {\n    seasonal_games: {\n      season: true,\n      endpoint: 'games'\n    },\n    daily_games: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'games'\n    },\n    weekly_games: {\n      season: true,\n      path: [{\n        key: 'week',\n        value: 'week'\n      }],\n      endpoint: 'games'\n    },\n    seasonal_player_gamelogs: {\n      season: true,\n      endpoint: 'player_gamelogs'\n    },\n    daily_player_gamelogs: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'player_gamelogs'\n    },\n    weekly_player_gamelogs: {\n      season: true,\n      path: [{\n        key: 'week',\n        value: 'week'\n      }],\n      endpoint: 'player_gamelogs'\n    },\n    seasonal_team_gamelogs: {\n      season: true,\n      endpoint: 'team_gamelogs'\n    },\n    daily_team_gamelogs: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'team_gamelogs'\n    },\n    weekly_team_gamelogs: {\n      season: true,\n      path: [{\n        key: 'week',\n        value: 'week'\n      }],\n      endpoint: 'team_gamelogs'\n    },\n    game_boxscore: {\n      season: true,\n      path: [{\n        key: 'game',\n        value: 'games'\n      }],\n      endpoint: 'boxscore'\n    },\n    game_playbyplay: {\n      season: true,\n      path: [{\n        key: 'game',\n        value: 'games'\n      }],\n      endpoint: 'playbyplay'\n    },\n    game_lineup: {\n      season: true,\n      path: [{\n        key: 'game',\n        value: 'games'\n      }],\n      endpoint: 'lineup'\n    },\n    current_season: {\n      season: false,\n      endpoint: 'current_season'\n    },\n    player_injuries: {\n      season: false,\n      endpoint: 'injuries'\n    },\n    latest_updates: {\n      season: true,\n      endpoint: 'latest_updates'\n    },\n    seasonal_team_stats: {\n      season: true,\n      endpoint: 'team_stats_totals'\n    },\n    seasonal_player_stats: {\n      season: true,\n      endpoint: 'player_stats_totals'\n    },\n    seasonal_venues: {\n      season: true,\n      endpoint: 'venues'\n    },\n    players: {\n      season: false,\n      endpoint: 'players'\n    },\n    seasonal_standings: {\n      season: true,\n      endpoint: 'standings'\n    },\n    seasonal_odds_gamelines: {\n      season: true,\n      endpoint: 'odds_gamelines'\n    },\n    daily_odds_gamelines: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'odds_gamelines'\n    },\n    weekly_odds_gamelines: {\n      season: true,\n      path: [{\n        key: 'week',\n        value: 'week'\n      }],\n      endpoint: 'odds_gamelines'\n    },\n    odds_futures: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'odds_futures'\n    },\n    daily_dfs: {\n      season: true,\n      path: [{\n        key: 'date',\n        value: 'date'\n      }],\n      endpoint: 'dfs'\n    },\n    weekly_dfs: {\n      season: true,\n      path: [{\n        key: 'week',\n        value: 'week'\n      }],\n      endpoint: 'dfs'\n    },\n    seasonal_dfs: {\n      season: true,\n      endpoint: 'dfs'\n    }\n  };\n  this.validFeeds = Object.keys(this.feeds);\n};\n\nutil.inherits(API_v2_0, API_v1_2);\n\nAPI_v2_0.prototype.__determineUrl = function (league, season, feed, format, params) {\n  const settings = this.feeds[feed];\n\n  if (settings.season && !season) {\n    throw new Error('You must specify a season for this request.');\n  }\n\n  let season_route = '';\n\n  if (settings.season && season) {\n    season_route = `${season}/`;\n  }\n\n  let extra_path = '';\n\n  if (settings.path) {\n    settings.path.forEach(path => {\n      if (!Object.keys(params).includes(path.key)) {\n        throw new Error(`You must specify a '${path.key}' param for this request.`);\n      } else if (!params[path.key]) {\n        throw new Error(`'${path.key}' param can not be empty.`);\n      } else {\n        extra_path += `${path.value}/${params[path.key]}/`; // delete params[path.key];\n      }\n    });\n  }\n\n  return `${this.baseUrl}/${league}/${season_route}${extra_path}${settings.endpoint}.${format}`;\n};\n\nexports = module.exports = API_v2_0;","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/node_modules/mysportsfeeds-node/lib/API_v2_0.js"],"names":["API_v1_2","require","util","API_v2_0","v","storeT","storeL","apply","arguments","baseUrl","feeds","seasonal_games","season","endpoint","daily_games","path","key","value","weekly_games","seasonal_player_gamelogs","daily_player_gamelogs","weekly_player_gamelogs","seasonal_team_gamelogs","daily_team_gamelogs","weekly_team_gamelogs","game_boxscore","game_playbyplay","game_lineup","current_season","player_injuries","latest_updates","seasonal_team_stats","seasonal_player_stats","seasonal_venues","players","seasonal_standings","seasonal_odds_gamelines","daily_odds_gamelines","weekly_odds_gamelines","odds_futures","daily_dfs","weekly_dfs","seasonal_dfs","validFeeds","Object","keys","inherits","prototype","__determineUrl","league","feed","format","params","settings","Error","season_route","extra_path","forEach","includes","exports","module"],"mappings":"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","sourcesContent":["var API_v1_2 = require('./API_v1_2');\r\nvar util = require('util');\r\n\r\n// Public Functions\r\nvar API_v2_0 = function (v, storeT, storeL) {\r\n  API_v1_2.apply(this, arguments);\r\n\r\n  this.baseUrl = \"https://api.mysportsfeeds.com/v2.0/pull\";\r\n\r\n  this.feeds = {\r\n    seasonal_games: {\r\n      season: true,\r\n      endpoint: 'games',\r\n    },\r\n    daily_games: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'games',\r\n    },\r\n    weekly_games: {\r\n      season: true,\r\n      path: [{ key: 'week', value: 'week' }],\r\n      endpoint: 'games',\r\n    },\r\n    seasonal_player_gamelogs: {\r\n      season: true,\r\n      endpoint: 'player_gamelogs',\r\n    },\r\n    daily_player_gamelogs: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'player_gamelogs',\r\n    },\r\n    weekly_player_gamelogs: {\r\n      season: true,\r\n      path: [{ key: 'week', value: 'week' }],\r\n      endpoint: 'player_gamelogs',\r\n    },\r\n    seasonal_team_gamelogs: {\r\n      season: true,\r\n      endpoint: 'team_gamelogs',\r\n    },\r\n    daily_team_gamelogs: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'team_gamelogs',\r\n    },\r\n    weekly_team_gamelogs: {\r\n      season: true,\r\n      path: [{ key: 'week', value: 'week' }],\r\n      endpoint: 'team_gamelogs',\r\n    },\r\n    game_boxscore: {\r\n      season: true,\r\n      path: [{ key: 'game', value: 'games' }],\r\n      endpoint: 'boxscore',\r\n    },\r\n    game_playbyplay: {\r\n      season: true,\r\n      path: [{ key: 'game', value: 'games' }],\r\n      endpoint: 'playbyplay',\r\n    },\r\n    game_lineup: {\r\n      season: true,\r\n      path: [{ key: 'game', value: 'games' }],\r\n      endpoint: 'lineup',\r\n    },\r\n    current_season: {\r\n      season: false,\r\n      endpoint: 'current_season',\r\n    },\r\n    player_injuries: {\r\n      season: false,\r\n      endpoint: 'injuries',\r\n    },\r\n    latest_updates: {\r\n      season: true,\r\n      endpoint: 'latest_updates',\r\n    },\r\n    seasonal_team_stats: {\r\n      season: true,\r\n      endpoint: 'team_stats_totals',\r\n    },\r\n    seasonal_player_stats: {\r\n      season: true,\r\n      endpoint: 'player_stats_totals',\r\n    },\r\n    seasonal_venues: {\r\n      season: true,\r\n      endpoint: 'venues',\r\n    },\r\n    players: {\r\n      season: false,\r\n      endpoint: 'players',\r\n    },\r\n    seasonal_standings: {\r\n      season: true,\r\n      endpoint: 'standings',\r\n    },\r\n    seasonal_odds_gamelines: {\r\n      season: true,\r\n      endpoint: 'odds_gamelines',\r\n    },\r\n    daily_odds_gamelines: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'odds_gamelines',\r\n    },\r\n    weekly_odds_gamelines: {\r\n      season: true,\r\n      path: [{ key: 'week', value: 'week' }],\r\n      endpoint: 'odds_gamelines',\r\n    },\r\n    odds_futures: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'odds_futures',\r\n    },\r\n    daily_dfs: {\r\n      season: true,\r\n      path: [{ key: 'date', value: 'date' }],\r\n      endpoint: 'dfs',\r\n    },\r\n    weekly_dfs: {\r\n      season: true,\r\n      path: [{ key: 'week', value: 'week' }],\r\n      endpoint: 'dfs',\r\n    },\r\n    seasonal_dfs: {\r\n      season: true,\r\n      endpoint: 'dfs',\r\n    },\r\n  };\r\n\r\n  this.validFeeds = Object.keys(this.feeds);\r\n};\r\n\r\nutil.inherits(API_v2_0, API_v1_2);\r\n\r\nAPI_v2_0.prototype.__determineUrl = function (league, season, feed, format, params) {\r\n  const settings = this.feeds[feed];\r\n\r\n  if (settings.season && !season) {\r\n    throw new Error('You must specify a season for this request.');\r\n  }\r\n\r\n  let season_route = '';\r\n  if (settings.season && season) {\r\n    season_route = `${season}/`;\r\n  }\r\n\r\n  let extra_path = '';\r\n  if (settings.path) {\r\n    settings.path.forEach(path => {\r\n      if (!Object.keys(params).includes(path.key)) {\r\n        throw new Error(\r\n          `You must specify a '${path.key}' param for this request.`\r\n        );\r\n      } else if (!params[path.key]) {\r\n        throw new Error(\r\n          `'${path.key}' param can not be empty.`\r\n        );\r\n      } else {\r\n        extra_path += `${path.value}/${params[path.key]}/`;\r\n        // delete params[path.key];\r\n      }\r\n    });\r\n  }\r\n\r\n  return `${this.baseUrl}/${league}/${season_route}${extra_path}${settings.endpoint}.${format}`;\r\n};\r\n\r\nexports = module.exports = API_v2_0;\r\n"]},"metadata":{},"sourceType":"script"}