{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondChu/NBA_datavis/client/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Sidebar from './Components/Sidebar/Sidebar';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport Home from './Pages/Home';\nimport Player from './Pages/Player/Player';\nimport Games from './Pages/Games/Games';\nimport PlayerHome from './Pages/Player/PlayerHome';\nconst errorLink = onError(({\n  graphqlErrors,\n  networkError\n}) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({\n      message,\n      location,\n      path\n    }) => {\n      alert(`Graphql error ${message}`);\n    });\n  }\n});\nconst link = from([errorLink, new HttpLink({\n  uri: 'http://localhost:8080/graphql'\n})]);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n}); // const AUTH_TOKEN = \"auth-token\";\n// const httpLink = createHttpLink({\n//   uri: 'http://localhost:8080/graphql'\n// });\n// const authLink = setContext((_, { headers }) => {\n//   const token = localStorage.getItem(AUTH_TOKEN);\n//   if (!token) {\n//     return {\n//       headers\n//     };\n//   }\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: `Bearer ${token}`\n//     }\n//   };\n// });\n// const client = new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache()\n// });\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/Home\",\n            component: Home\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/Player(/:id)\",\n            render: props => /*#__PURE__*/_jsxDEV(Player, {\n              id: props.match.params.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/Games\",\n            component: Games\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            component: () => 404\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/RaymondChu/NBA_datavis/client/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","Sidebar","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","Home","Player","Games","PlayerHome","errorLink","graphqlErrors","networkError","map","message","location","path","alert","link","uri","client","cache","App","props","match","params","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAa,IAAIC,MAAzB,EAAiCC,MAAjC,EAAyCC,KAAzC,QAAqD,kBAArD;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SACGC,YADH,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,QAJJ,EAKIC,IALJ,QAMS,gBANT;AAOA,SAAQC,OAAR,QAAsB,2BAAtB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,MAAMC,SAAS,GAAGL,OAAO,CAAC,CAAC;AAAEM,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAoC;AAC5D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,KAAD,KAAiC;AACjDC,MAAAA,KAAK,CAAE,iBAAgBH,OAAQ,EAA1B,CAAL;AACD,KAFD;AAGD;AACF,CANwB,CAAzB;AAQA,MAAMI,IAAI,GAAGd,IAAI,CAAC,CAChBM,SADgB,EAEhB,IAAIP,QAAJ,CAAa;AAAEgB,EAAAA,GAAG,EAAC;AAAN,CAAb,CAFgB,CAAD,CAAjB;AAKA,MAAMC,MAAM,GAAG,IAAIpB,YAAJ,CAAiB;AAC9BqB,EAAAA,KAAK,EAAE,IAAIpB,aAAJ,EADuB;AAE9BiB,EAAAA,IAAI,EAAEA;AAFwB,CAAjB,CAAf,C,CAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAASI,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAIF,MAA1B;AAAA,2BACE,QAAC,MAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,OAAlB;AAA0B,YAAA,SAAS,EAAId;AAAvC;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,eAAlB;AAAkC,YAAA,MAAM,EAAGiB,KAAD,iBAAY,QAAC,MAAD;AAAQ,cAAA,EAAE,EAAEA,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC;AAA/B;AAAA;AAAA;AAAA;AAAA;AAAtD;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,QAAlB;AAA2B,YAAA,SAAS,EAAIlB;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,KAAD;AAAO,YAAA,SAAS,EAAE,MAAM;AAAxB;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KAjBQc,G;AAmBT,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Sidebar from './Components/Sidebar/Sidebar'\nimport {\n   ApolloClient,\n    InMemoryCache, \n    ApolloProvider, \n    HttpLink, \n    from\n  } from '@apollo/client';\nimport {onError} from '@apollo/client/link/error'\n\nimport Home from './Pages/Home'\nimport Player from './Pages/Player/Player'\nimport Games from './Pages/Games/Games'\nimport PlayerHome from './Pages/Player/PlayerHome';\n\nconst errorLink = onError(({ graphqlErrors, networkError}) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      alert(`Graphql error ${message}`);\n    })\n  }\n})\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri:'http://localhost:8080/graphql' })\n])\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\n// const AUTH_TOKEN = \"auth-token\";\n\n// const httpLink = createHttpLink({\n//   uri: 'http://localhost:8080/graphql'\n// });\n\n// const authLink = setContext((_, { headers }) => {\n//   const token = localStorage.getItem(AUTH_TOKEN);\n\n//   if (!token) {\n//     return {\n//       headers\n//     };\n//   }\n\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: `Bearer ${token}`\n//     }\n//   };\n// });\n\n// const client = new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache()\n// });\n\nfunction App() {\n  return (\n    <ApolloProvider client = {client}>\n      <Router>\n        <div className=\"App\">\n            <Sidebar />\n            <Switch>\n              <Route exact path='/Home' component = {Home} />\n              {/* <Route exact path='/Player' component = {PlayerHome} /> */}\n              <Route exact path='/Player(/:id)' render={(props) => (<Player id={props.match.params.id} />)} />\n              <Route exact path='/Games' component = {Games} />\n              <Route component={() => 404} />\n            </Switch>  \n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}