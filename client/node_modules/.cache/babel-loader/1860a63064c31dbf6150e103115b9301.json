{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Components/Graphing/CirclePacking.js\";\n// import React, { useRef, useState, useEffect } from 'react'\n// import * as d3 from 'd3'\n// const data1 = {\n//     \"name\": \"flare\",\n//     \"children\": [\n//      {\n//       \"name\": \"analytics\",\n//       \"children\": [\n//        {\n//         \"name\": \"cluster\",\n//         \"children\": [\n//          {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n//          {\"name\": \"CommunityStructure\", \"size\": 3812},\n//          {\"name\": \"MergeEdge\", \"size\": 743}\n//         ]\n//        },\n//        {\n//         \"name\": \"graph\",\n//         \"children\": [\n//          {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n//          {\"name\": \"LinkDistance\", \"size\": 5731}\n//         ]\n//        }\n//       ]\n//      },\n//      {\n//         \"name\": \"analytics2\",\n//         \"children\": [\n//          {\n//           \"name\": \"cluster\",\n//           \"children\": [\n//            {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n//            {\"name\": \"CommunityStructure\", \"size\": 3812},\n//            {\"name\": \"MergeEdge\", \"size\": 743}\n//           ]\n//          },\n//          {\n//           \"name\": \"graph\",\n//           \"children\": [\n//            {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n//            {\"name\": \"LinkDistance\", \"size\": 5731}\n//           ]\n//          }\n//         ]\n//        }\n//     ]\n//    }\n// function CirclePacking() {\n//     const [data, setData] = useState(data1)\n//     const svgRef = useRef()\n//     useEffect(() => {\n//         let focus = root;\n//         let view;\n//         const svg = d3.select(svgRef.current)\n//         var height = 932\n//         var width = 932\n//         var root = d3.hierarchy(data)\n//                     .count()\n//                     .sort((a,b) => b.value - a.value);\n//         var packLayout = d3.pack()\n//             .size([width, height])\n//             .padding(5)\n//         packLayout(root)\n//         var color = d3.scaleLinear()\n//             .domain([0, 5])\n//             .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\n//             .interpolate(d3.interpolateHcl)\n//         svg.attr(\"width\", 932)\n//             .attr(\"height\", 932)\n//             .attr(\"class\", \"packLayout\")\n//             .style(\"display\", \"block\")\n//             .style(\"margin\", \"0 -14px\")\n//             .style(\"background\", color(0))\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"click\", (event) => zoom(event, root));\n//         const node = svg.selectAll(\"g\").append('g')\n//             .data(root.descendants().slice(1))\n//             .enter()\n//             .append('circle')\n//             .attr(\"fill\", d => d.children ? color(d.depth) : \"white\")\n//             .attr(\"pointer-events\", d => !d.children ? \"none\" : null)\n//             .attr('cx', function(d) { return d.x; })\n//             .attr('cy', function(d) { return d.y; })\n//             .attr('r', function(d) { return d.r; })\n//             .on(\"mouseover\", function() { d3.select(this).attr(\"stroke\", \"#000\"); })\n//             .on(\"mouseout\", function() { d3.select(this).attr(\"stroke\", null); })\n//             .attr('stroke', 'white');\n//         const label = svg.append(\"g\")\n//             .style(\"font\", \"10px sans-serif\")\n//             .attr(\"pointer-events\", \"none\")\n//             .attr(\"text-anchor\", \"middle\")\n//             .selectAll(\"text\")\n//             .data(root.descendants())\n//             .join(\"text\")\n//             .style(\"fill-opacity\", d => d.parent === root ? 1 : 0)\n//             .style(\"display\", d => d.parent === root ? \"inline\" : \"none\")\n//             .text(d => d.data.name);\n//         zoomTo([root.x, root.y, root.r * 2]);\n//             function zoomTo(v) {\n//                 const k = height / v[2];\n//                 view = v;\n//                 label.attr(\"transform\", d => `translate(${(d.x) * k},${(d.y) * k})`);\n//                 //label.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n//                 //node.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n//                 node.attr(\"r\", d => d.r * k);\n//               }\n//               function zoom(event, d) {\n//                 const focus0 = focus;\n//                 focus = d;\n//                 const transition = svg.transition()\n//                     .duration(event.altKey ? 7500 : 750)\n//                     .tween(\"zoom\", d => {\n//                       const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n//                       return t => zoomTo(i(t));\n//                     });\n//                 label\n//                   .filter(function(d) { return d.parent === focus || this.style.display === \"inline\"; })\n//                   .transition(transition)\n//                     .style(\"fill-opacity\", d => d.parent === focus ? 1 : 0)\n//                     .on(\"start\", function(d) { if (d.parent === focus) this.style.display = \"inline\"; })\n//                     .on(\"end\", function(d) { if (d.parent !== focus) this.style.display = \"none\"; });\n//               }\n//         // svg.selectAll(\"path\")\n//         //     .data([data])\n//         //     .join(\"path\")\n//         //     .attr(\"d\", value => myLine(value))\n//         //     .attr(\"fill\", \"none\")\n//         //     .attr(\"stroke\", \"red\")\n//     },[])\n//     return (\n//         <svg className=\"circPack\" ref = {svgRef} viewBox={`0 0 932 932`}></svg>\n//     )\n// }\nimport React from 'react';\nimport rd3 from 'react-d3-library';\nimport node from './d3file';\nconst RD3Component = rd3.Component;\n\nclass CirclePacking extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      d3: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      d3: node\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RD3Component, {\n        data: this.state.d3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default CirclePacking;","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Components/Graphing/CirclePacking.js"],"names":["React","rd3","node","RD3Component","Component","CirclePacking","constructor","props","state","d3","componentDidMount","setState","render"],"mappingskB,OAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,MAAMC,YAAY,GAAGF,GAAG,CAACG,SAAzB;;AAEA,MAAMC,aAAN,SAA4BL,KAAK,CAACI,SAAlC,CAA4C;AAE1CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,EAAE,EAAE;AAAL,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAACF,MAAAA,EAAE,EAAEP;AAAL,KAAd;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAjByC;;AAkB3C;AACD,eAAeJ,aAAf","sourcesContent":["// import React, { useRef, useState, useEffect } from 'react'\n// import * as d3 from 'd3'\n\n// const data1 = {\n//     \"name\": \"flare\",\n//     \"children\": [\n//      {\n//       \"name\": \"analytics\",\n//       \"children\": [\n//        {\n//         \"name\": \"cluster\",\n//         \"children\": [\n//          {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n//          {\"name\": \"CommunityStructure\", \"size\": 3812},\n//          {\"name\": \"MergeEdge\", \"size\": 743}\n//         ]\n//        },\n//        {\n//         \"name\": \"graph\",\n//         \"children\": [\n//          {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n//          {\"name\": \"LinkDistance\", \"size\": 5731}\n//         ]\n//        }\n//       ]\n//      },\n//      {\n//         \"name\": \"analytics2\",\n//         \"children\": [\n//          {\n//           \"name\": \"cluster\",\n//           \"children\": [\n//            {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n//            {\"name\": \"CommunityStructure\", \"size\": 3812},\n//            {\"name\": \"MergeEdge\", \"size\": 743}\n//           ]\n//          },\n//          {\n//           \"name\": \"graph\",\n//           \"children\": [\n//            {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n//            {\"name\": \"LinkDistance\", \"size\": 5731}\n//           ]\n//          }\n//         ]\n//        }\n//     ]\n//    }\n\n// function CirclePacking() {\n    \n//     const [data, setData] = useState(data1)\n//     const svgRef = useRef()\n    \n//     useEffect(() => {\n//         let focus = root;\n//         let view;\n//         const svg = d3.select(svgRef.current)\n\n//         var height = 932\n//         var width = 932\n//         var root = d3.hierarchy(data)\n//                     .count()\n//                     .sort((a,b) => b.value - a.value);\n        \n//         var packLayout = d3.pack()\n//             .size([width, height])\n//             .padding(5)\n\n//         packLayout(root)\n//         var color = d3.scaleLinear()\n//             .domain([0, 5])\n//             .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\n//             .interpolate(d3.interpolateHcl)\n\n//         svg.attr(\"width\", 932)\n//             .attr(\"height\", 932)\n//             .attr(\"class\", \"packLayout\")\n//             .style(\"display\", \"block\")\n//             .style(\"margin\", \"0 -14px\")\n//             .style(\"background\", color(0))\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"click\", (event) => zoom(event, root));\n            \n\n//         const node = svg.selectAll(\"g\").append('g')\n//             .data(root.descendants().slice(1))\n//             .enter()\n//             .append('circle')\n//             .attr(\"fill\", d => d.children ? color(d.depth) : \"white\")\n//             .attr(\"pointer-events\", d => !d.children ? \"none\" : null)\n//             .attr('cx', function(d) { return d.x; })\n//             .attr('cy', function(d) { return d.y; })\n//             .attr('r', function(d) { return d.r; })\n//             .on(\"mouseover\", function() { d3.select(this).attr(\"stroke\", \"#000\"); })\n//             .on(\"mouseout\", function() { d3.select(this).attr(\"stroke\", null); })\n//             .attr('stroke', 'white');\n\n//         const label = svg.append(\"g\")\n//             .style(\"font\", \"10px sans-serif\")\n//             .attr(\"pointer-events\", \"none\")\n//             .attr(\"text-anchor\", \"middle\")\n//             .selectAll(\"text\")\n//             .data(root.descendants())\n//             .join(\"text\")\n//             .style(\"fill-opacity\", d => d.parent === root ? 1 : 0)\n//             .style(\"display\", d => d.parent === root ? \"inline\" : \"none\")\n//             .text(d => d.data.name);\n        \n//         zoomTo([root.x, root.y, root.r * 2]);\n//             function zoomTo(v) {\n//                 const k = height / v[2];\n            \n//                 view = v;\n//                 label.attr(\"transform\", d => `translate(${(d.x) * k},${(d.y) * k})`);\n//                 //label.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n//                 //node.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n//                 node.attr(\"r\", d => d.r * k);\n//               }\n            \n//               function zoom(event, d) {\n//                 const focus0 = focus;\n            \n//                 focus = d;\n            \n//                 const transition = svg.transition()\n//                     .duration(event.altKey ? 7500 : 750)\n//                     .tween(\"zoom\", d => {\n//                       const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n//                       return t => zoomTo(i(t));\n//                     });\n            \n//                 label\n//                   .filter(function(d) { return d.parent === focus || this.style.display === \"inline\"; })\n//                   .transition(transition)\n//                     .style(\"fill-opacity\", d => d.parent === focus ? 1 : 0)\n//                     .on(\"start\", function(d) { if (d.parent === focus) this.style.display = \"inline\"; })\n//                     .on(\"end\", function(d) { if (d.parent !== focus) this.style.display = \"none\"; });\n//               }\n//         // svg.selectAll(\"path\")\n//         //     .data([data])\n//         //     .join(\"path\")\n//         //     .attr(\"d\", value => myLine(value))\n//         //     .attr(\"fill\", \"none\")\n//         //     .attr(\"stroke\", \"red\")\n\n//     },[])\n//     return (\n//         <svg className=\"circPack\" ref = {svgRef} viewBox={`0 0 932 932`}></svg>\n//     )\n// }\n\nimport React from 'react'\nimport rd3 from 'react-d3-library';\nimport node from './d3file';\nconst RD3Component = rd3.Component;\n\nclass CirclePacking extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {d3: ''}\n  }\n\n  componentDidMount() {\n    this.setState({d3: node});\n  }\n\n  render() {\n    return (\n      <div>\n        <RD3Component data={this.state.d3} />\n      </div>\n    )\n  }\n};\nexport default CirclePacking\n"]},"metadata":{},"sourceType":"module"}