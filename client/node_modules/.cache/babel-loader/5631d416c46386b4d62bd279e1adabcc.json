{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PlayerProfile from './PlayerProfile';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats';\nimport SearchBar from '../../Components/SearchBar/SearchBar';\nimport Boxscores from '../../Components/Graphing/Boxscores';\nimport nba from 'nba';\nimport { useParams } from 'react-router-dom';\nimport { MdBlock } from 'react-icons/md';\nimport PlayerHome from './PlayerHome';\nconst Player_Query = gql`\n    query PlayerQuery ($playerId: Int!) {\n        historicStats (playerId: $playerId) {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo (playerId: $playerId) {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n        topStats {\n            top30 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n            top70 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n            top120 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n          }\n        leagueGameLog(playerId: $playerId) {\n            resource,\n            parameters {\n              LeagueID\n              Season\n              SeasonType\n              PlayerOrTeam\n              Counter\n              Sorter\n              Direction\n              DateFrom\n              DateTo\n            },\n            resultSets {\n              name\n              headers\n              rowSet\n            }\n        }\n    }\n`;\n\nfunction Player({\n  match\n}) {\n  _s();\n\n  const {\n    id\n  } = match.params;\n  const [seasonStats, setSeasonStats] = useState([]);\n  const [playerInfo, setPlayerInfo] = useState([]);\n  const [playerGames, setPlayerGames] = useState([]);\n  const [topStats, setTopStats] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState(parseInt(id));\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Player_Query, {\n    variables: {\n      playerId: currentPlayer\n    }\n  });\n  const [dataLoaded, setDataLoaded] = useState(false);\n  useEffect(() => {\n    setDataLoaded(false);\n\n    if (id) {\n      if (!loading) {\n        var temp_arr = [];\n        var temp_arr1 = [];\n        var temp_arr2 = [];\n        temp_arr = data['historicStats'].filter(item => item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\" || item.seasonId !== \"2020-21\");\n        setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length));\n        setPlayerInfo(data['playerInfo']); //setPlayerGames(data['leagueGameLog']['resultSets'])\n\n        data['leagueGameLog']['resultSets'][0]['rowSet'].map(item => temp_arr1.push({\n          gameID: item[6],\n          date: item[7],\n          matchup: item[8],\n          wl: item[9],\n          fgPct: parseFloat(item[13] * 100).toFixed(1) + \"%\",\n          fg3Pct: parseFloat(item[16] * 100).toFixed(1) + \"%\",\n          ftPct: parseFloat(item[19] * 100).toFixed(1) + \"%\",\n          min: item[10],\n          reb: item[22],\n          ast: item[23],\n          blk: item[25],\n          stl: item[24],\n          tov: item[26],\n          pf: item[27],\n          pts: item[28]\n        }));\n        setPlayerGames(temp_arr1);\n\n        for (var key of Object.keys(data.topStats)) {\n          if (key !== \"__typename\") {\n            console.log(key);\n            temp_arr2.push(data.topStats[key]);\n          }\n        }\n\n        setTopStats(temp_arr2);\n        setDataLoaded(true);\n      }\n    }\n  }, [data]);\n  if (loading) return 'Loading...';\n\n  if (dataLoaded) {\n    console.log(topStats);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playerPageContainer\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      setCurrentPlayer: setCurrentPlayer,\n      setDataLoaded: setDataLoaded,\n      playerInfo: playerInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), !id && /*#__PURE__*/_jsxDEV(PlayerHome, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 22\n    }, this), dataLoaded && !error && id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerDashboard\",\n        children: [/*#__PURE__*/_jsxDEV(PlayerProfile, {\n          playerInfo: playerInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RadarStats, {\n          config: seasonStats,\n          statData: topStats,\n          style: {\n            height: '350px',\n            width: '750px'\n          },\n          size: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Boxscores, {\n          data: playerGames\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false), error && id && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 30\n    }, this), !dataLoaded && id && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"QGaTUxVoUeMMmeUq2zBffTQKbQI=\", false, function () {\n  return [useQuery];\n});\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js"],"names":["React","useEffect","useState","PlayerProfile","useQuery","gql","RadarStats","SearchBar","Boxscores","nba","useParams","MdBlock","PlayerHome","Player_Query","Player","match","id","params","seasonStats","setSeasonStats","playerInfo","setPlayerInfo","playerGames","setPlayerGames","topStats","setTopStats","currentPlayer","setCurrentPlayer","parseInt","loading","error","data","variables","playerId","dataLoaded","setDataLoaded","temp_arr","temp_arr1","temp_arr2","filter","item","seasonId","teamAbbreviation","slice","length","map","push","gameID","date","matchup","wl","fgPct","parseFloat","toFixed","fg3Pct","ftPct","min","reb","ast","blk","stl","tov","pf","pts","key","Object","keys","console","log","height","width","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PlayerProfile from './PlayerProfile';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats'\nimport SearchBar from '../../Components/SearchBar/SearchBar'\nimport Boxscores from '../../Components/Graphing/Boxscores'\nimport nba from 'nba';\nimport { useParams } from 'react-router-dom'\nimport { MdBlock } from 'react-icons/md';\nimport PlayerHome from './PlayerHome'\n\nconst Player_Query = gql`\n    query PlayerQuery ($playerId: Int!) {\n        historicStats (playerId: $playerId) {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo (playerId: $playerId) {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n        topStats {\n            top30 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n            top70 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n            top120 {\n              seasonId\n              pts: PTS\n              reb: REB\n              ast: AST\n              stl: STL\n              blk: BLK\n              tov: TOV\n            }\n          }\n        leagueGameLog(playerId: $playerId) {\n            resource,\n            parameters {\n              LeagueID\n              Season\n              SeasonType\n              PlayerOrTeam\n              Counter\n              Sorter\n              Direction\n              DateFrom\n              DateTo\n            },\n            resultSets {\n              name\n              headers\n              rowSet\n            }\n        }\n    }\n`\n\nfunction Player({match}) {\n    const { id } = match.params;\n    const [seasonStats, setSeasonStats] = useState([])\n    const [playerInfo, setPlayerInfo] = useState([])\n    const [playerGames, setPlayerGames] = useState([])\n    const [topStats, setTopStats] = useState([])\n    const [currentPlayer, setCurrentPlayer] = useState(parseInt(id));\n\n    const { loading, error, data } = useQuery(Player_Query, {\n        variables: {playerId: currentPlayer}\n    });\n\n    const [dataLoaded, setDataLoaded] = useState(false);\n    \n    useEffect(() => {\n        setDataLoaded(false)\n        if (id) {\n            if (!loading) {\n                var temp_arr = []\n                var temp_arr1 = []\n                var temp_arr2 = []\n                temp_arr = data['historicStats'].filter((item) =>\n                    (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n                    item.seasonId !== \"2020-21\"\n                )\n                setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n                setPlayerInfo(data['playerInfo'])\n                //setPlayerGames(data['leagueGameLog']['resultSets'])\n                data['leagueGameLog']['resultSets'][0]['rowSet'].map((item) => (\n                    temp_arr1.push({\n                        gameID:item[6],\n                        date: item[7],\n                        matchup: item[8],\n                        wl:item[9],\n                        fgPct:parseFloat(item[13]*100).toFixed(1)+\"%\",\n                        fg3Pct:parseFloat(item[16]*100).toFixed(1)+\"%\",\n                        ftPct:parseFloat(item[19]*100).toFixed(1)+\"%\",\n                        min:item[10],\n                        reb:item[22],\n                        ast:item[23],\n                        blk:item[25],\n                        stl:item[24],\n                        tov:item[26],\n                        pf:item[27],\n                        pts:item[28]\n                    })\n                ))\n                setPlayerGames(temp_arr1)\n                for (var key of Object.keys(data.topStats)) {\n                    if (key !== \"__typename\") {\n                        console.log(key)\n                        temp_arr2.push(data.topStats[key])\n                    }\n                }\n                setTopStats(temp_arr2)\n                setDataLoaded(true);\n            }\n        }\n    }, [data]);\n    if (loading) return 'Loading...';\n\n    if (dataLoaded) {\n        console.log(topStats)\n    }\n\n    return (\n        <div className = \"playerPageContainer\">\n            <SearchBar setCurrentPlayer = {setCurrentPlayer} setDataLoaded={setDataLoaded} playerInfo={playerInfo} />\n            { !id && <PlayerHome />}\n            {(dataLoaded && !error && id)  && \n                <>\n                <div className=\"playerDashboard\">\n                    <PlayerProfile playerInfo={playerInfo}/>\n                    <RadarStats config = {seasonStats} statData = {topStats} style = {{height:'350px', width:'750px'}} size = {100}/>\n                    <Boxscores data = {playerGames} />\n                </div>\n            </>}\n            { error && id && <div> {error.message} </div>}\n            { !dataLoaded && id && <div>Loading</div> }\n            \n         </div>\n    )\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}