{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats';\nimport { isNullableType } from 'graphql';\nconst Player_Query = gql`\n    query PlayerQuery {\n        historicStats {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n    }\n`;\n\nfunction Player() {\n  _s();\n\n  const [seasonStats, setSeasonStats] = useState([]);\n  const [playerInfo, setPlayerInfo] = useState([]);\n  const [updated, setUpdated] = useState(false);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Player_Query);\n  var temp_arr = [];\n  useEffect(() => {\n    if (!loading) {\n      temp_arr = data['historicStats'].filter(item => item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\" || item.seasonId !== \"2020-21\");\n      setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length));\n      setPlayerInfo(data['playerInfo']);\n      setUpdated(true);\n    }\n  }, [data, updated]);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`; // const LoadData = () => {\n  //     const { loading, error, data } = useQuery(Player_Query);\n  //     if (!loading) {\n  //         temp_arr = data['historicStats'].filter((item) =>\n  //             (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n  //             item.seasonId !== \"2020-21\"\n  //         )\n  //         setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n  //         setPlayerInfo(data['playerInfo'])\n  //     }\n  // }\n  // useEffect(() => {\n  //     async function anyNameFunction() {\n  //         await LoadData();\n  //     }\n  //     anyNameFunction();\n  // }, []);\n  // // const arr = [\n  // //     {\n  // //         fgPct:{subject:\"Field-Goal-%\"},\n  // //         //pg3Pct:{subject:\"3s-%\"},\n  // //         ftPct:{subject:\"Free-Throw-%\"},\n  // //         fG3M:{subject:\"3s-%\"},\n  // //         pts:{subject:\"Points\"},\n  // //         min:{subject:\"Minutes\"},\n  // //         reb:{subject:\"Rebounds\"},\n  // //         ast:{subject:\"Assists\"},\n  // //         stl:{subject:\"Steals\"},\n  // //         blk:{subject:\"Blocks\"},\n  // //         tov:{subject:\"Turnovers\"}\n  // //     }   \n  // // ]\n  // //console.log(Object.keys(seasonStats[0]))\n  // // seasonStats.map((item, key) => (\n  // //     //arr[0].min[item.seasonId] = item.min,\n  // //     arr[0].fgPct[item.seasonId] = item.fgPct,\n  // //     arr[0].ftPct[item.seasonId] = item.ftPct,\n  // //     arr[0].fG3M[item.seasonId] = item.fG3M,\n  // //     //arr[0].pts[item.seasonId] = item.pts,\n  // //     arr[0].reb[item.seasonId] = item.reb,\n  // //     arr[0].ast[item.seasonId] = item.ast,\n  // //     arr[0].stl[item.seasonId] = item.stl,\n  // //     arr[0].blk[item.seasonId] = item.blk,\n  // //     arr[0].tov[item.seasonId] = item.tov\n  // // ))\n  // var temp_arr = []\n  // // for (const [key, value] of Object.entries(arr[0])) {\n  // //     console.log(`key: ${key}, value: ${value}`)\n  // //     // temp_arr.push(arr[`${key}`])\n  // //     temp_arr.push(arr[0][`${key}`])\n  // // }\n  // //console.log(seasonStats)\n  // seasonStats.map((item) => (\n  //     temp_arr.push({\n  //         seasonId: item.seasonId,\n  //         fgPct: item.fgPct,\n  //         ftPct: item.ftPct,\n  //         fG3M: item.fG3M,\n  //         pts:item.pts,\n  //         min: item.min,\n  //         reb: item.reb,\n  //         ast: item.ast,\n  //         stl: item.stl,\n  //         blk: item.blk,\n  //         tov: item.tov\n  //     })\n  // ))\n\n  console.log(playerInfo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playerDashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"playerInfo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-headshot\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require(\"../../Assets/Images/avatar.png\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"xWkhueaP1kSrswkG6bqSdUYpCV8=\", false, function () {\n  return [useQuery];\n});\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Player/Player.js"],"names":["React","useEffect","useState","useQuery","gql","RadarStats","isNullableType","Player_Query","Player","seasonStats","setSeasonStats","playerInfo","setPlayerInfo","updated","setUpdated","loading","error","data","temp_arr","filter","item","seasonId","teamAbbreviation","slice","length","message","console","log","require"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,MAAMC,YAAY,GAAGH,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9BA;;AA+BA,SAASI,MAAT,GAAkB;AAAA;;AACd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bd,QAAQ,CAACI,YAAD,CAAzC;AAEA,MAAIW,QAAQ,GAAG,EAAf;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACc,OAAL,EAAc;AACVG,MAAAA,QAAQ,GAAGD,IAAI,CAAC,eAAD,CAAJ,CAAsBE,MAAtB,CAA8BC,IAAD,IACnCA,IAAI,CAACC,QAAL,KAAkB,SAAlB,IAA+BD,IAAI,CAACE,gBAAL,KAA0B,KAA1D,IACAF,IAAI,CAACC,QAAL,KAAkB,SAFX,CAAX;AAIAX,MAAAA,cAAc,CAACQ,QAAQ,CAACK,KAAT,CAAeL,QAAQ,CAACM,MAAT,GAAkB,CAAjC,EAAoCN,QAAQ,CAACM,MAA7C,CAAD,CAAd;AACAZ,MAAAA,aAAa,CAACK,IAAI,CAAC,YAAD,CAAL,CAAb;AACAH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GAVQ,EAUN,CAACG,IAAD,EAAOJ,OAAP,CAVM,CAAT;AAYA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACS,OAAQ,EAA/B,CArBG,CAuBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI;AAAS,MAAA,SAAS,EAAC,sBAAnB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACI;AAAK,UAAA,GAAG,EAAIiB,OAAO,CAAC,gCAAD;AAAnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAjHQpB,M;UAI4BL,Q;;;KAJ5BK,M;AAmHT,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport RadarStats from '../../Components/Graphing/RadarStats'\nimport { isNullableType } from 'graphql';\n\nconst Player_Query = gql`\n    query PlayerQuery {\n        historicStats {\n            playerId\n            seasonId\n            pts\n            reb\n            ast\n            fG3M\n            stl\n            blk\n            min\n            tov\n            fga\n            fG3A\n            fgPct\n            ftPct\n            fg3Pct\n            fta\n            teamAbbreviation\n        }\n        playerInfo {\n            personId\n            displayFirstLast\n            jersey\n            position\n            teamName\n            teamCity\n        }\n    }\n`\nfunction Player() {\n    const [seasonStats, setSeasonStats] = useState([])\n    const [playerInfo, setPlayerInfo] = useState([])\n    const [updated, setUpdated] = useState(false)\n    const { loading, error, data } = useQuery(Player_Query);\n    \n    var temp_arr = []\n    \n    useEffect(() => {\n        if (!loading) {\n            temp_arr = data['historicStats'].filter((item) =>\n                (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n                item.seasonId !== \"2020-21\"\n            )\n            setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n            setPlayerInfo(data['playerInfo'])\n            setUpdated(true);\n        }\n    }, [data, updated]);\n    \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    // const LoadData = () => {\n    //     const { loading, error, data } = useQuery(Player_Query);\n    //     if (!loading) {\n    //         temp_arr = data['historicStats'].filter((item) =>\n    //             (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n    //             item.seasonId !== \"2020-21\"\n    //         )\n    //         setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n    //         setPlayerInfo(data['playerInfo'])\n    //     }\n    // }\n    // useEffect(() => {\n    //     async function anyNameFunction() {\n    //         await LoadData();\n    //     }\n    //     anyNameFunction();\n    // }, []);\n    // // const arr = [\n    // //     {\n    // //         fgPct:{subject:\"Field-Goal-%\"},\n    // //         //pg3Pct:{subject:\"3s-%\"},\n    // //         ftPct:{subject:\"Free-Throw-%\"},\n    // //         fG3M:{subject:\"3s-%\"},\n    // //         pts:{subject:\"Points\"},\n    // //         min:{subject:\"Minutes\"},\n    // //         reb:{subject:\"Rebounds\"},\n    // //         ast:{subject:\"Assists\"},\n    // //         stl:{subject:\"Steals\"},\n    // //         blk:{subject:\"Blocks\"},\n    // //         tov:{subject:\"Turnovers\"}\n    // //     }   \n    // // ]\n\n    // //console.log(Object.keys(seasonStats[0]))\n\n    // // seasonStats.map((item, key) => (\n    // //     //arr[0].min[item.seasonId] = item.min,\n    // //     arr[0].fgPct[item.seasonId] = item.fgPct,\n    // //     arr[0].ftPct[item.seasonId] = item.ftPct,\n    // //     arr[0].fG3M[item.seasonId] = item.fG3M,\n    // //     //arr[0].pts[item.seasonId] = item.pts,\n    // //     arr[0].reb[item.seasonId] = item.reb,\n    // //     arr[0].ast[item.seasonId] = item.ast,\n    // //     arr[0].stl[item.seasonId] = item.stl,\n    // //     arr[0].blk[item.seasonId] = item.blk,\n    // //     arr[0].tov[item.seasonId] = item.tov\n    // // ))\n\n    // var temp_arr = []\n    // // for (const [key, value] of Object.entries(arr[0])) {\n    // //     console.log(`key: ${key}, value: ${value}`)\n    // //     // temp_arr.push(arr[`${key}`])\n    // //     temp_arr.push(arr[0][`${key}`])\n    // // }\n    // //console.log(seasonStats)\n    // seasonStats.map((item) => (\n    //     temp_arr.push({\n    //         seasonId: item.seasonId,\n    //         fgPct: item.fgPct,\n    //         ftPct: item.ftPct,\n    //         fG3M: item.fG3M,\n    //         pts:item.pts,\n    //         min: item.min,\n    //         reb: item.reb,\n    //         ast: item.ast,\n    //         stl: item.stl,\n    //         blk: item.blk,\n    //         tov: item.tov\n    //     })\n    // ))\n\n    console.log(playerInfo)\n\n    return (\n        <div className=\"playerDashboard\">\n            <section className=\"playerInfo-container\">\n                <div className=\"player-headshot\">\n                    <img src = {require(\"../../Assets/Images/avatar.png\")}></img>\n                    {/* <p> {playerInfo.displayFirstLast}</p> */}\n                </div>\n                <div className=\"playerInfo\">\n                    {/* <p> Name: {playerInfo[0].displayFirstLast} </p>\n                    <p> Team: {playerInfo[0].teamCity} {playerInfo[0].teamName} </p>\n                    <p> Position: {playerInfo[0].position} </p>\n                    <p> Jersey: {playerInfo[0].jersey} </p> */}\n                </div>\n            </section>\n            {/* <RadarStats config = {seasonStats} style = {{height:'350px', width:'1050px'}}/>  */}\n        </div>\n    )\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}