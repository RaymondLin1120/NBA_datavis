{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Games/Games.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nconst Game_Query = gql`\n    query GameQuery {\n        scoreboard {\n        gameHeader {\n        gameDateEst\n        gameSequence\n        gameId\n        gameStatusId\n        gameStatusText\n        gamecode\n        homeTeamId\n        visitorTeamId\n        season\n        livePeriod\n        livePcTime\n        livePeriodTimeBcast\n        }\n        lineScore {\n        gameDateEst\n        gameSequence\n        gameId\n        teamId\n        teamAbbreviation\n        teamCityName\n        teamWinsLosses\n        ptsQtr1\n        ptsQtr2\n        ptsQtr3\n        ptsQtr4\n        ptsOt1\n        ptsOt2\n        ptsOt3\n        ptsOt4\n        pts\n        fgPct\n        ftPct\n        fg3Pct\n        ast\n        reb\n        tov\n        }\n    }\n    }\t\n`;\n\nfunction Games() {\n  _s();\n\n  const [seasonStats, setSeasonStats] = useState([]);\n  const [playerInfo, setPlayerInfo] = useState([]);\n  const [playerData, setPlayerData] = useState([]);\n  const [updated, setUpdated] = useState(false);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Player_Query);\n  var temp_arr = [];\n  useEffect(() => {\n    if (!loading) {\n      temp_arr = data['historicStats'].filter(item => item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\" || item.seasonId !== \"2020-21\");\n      setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length));\n      setPlayerInfo(data['playerInfo']);\n      setPlayerData(data['currentStats']);\n      setUpdated(true);\n    }\n  }, [data, updated]);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameDashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Today's Games \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Games, \"Le3OthbggVDIquBZGI1eYnWUJR4=\", false, function () {\n  return [useQuery];\n});\n\n_c = Games;\nexport default Games;\n\nvar _c;\n\n$RefreshReg$(_c, \"Games\");","map":{"version":3,"sources":["/Users/RaymondLin/Desktop/Projects/nba_datavis/client/src/Pages/Games/Games.js"],"names":["React","useEffect","useState","useQuery","gql","Game_Query","Games","seasonStats","setSeasonStats","playerInfo","setPlayerInfo","playerData","setPlayerData","updated","setUpdated","loading","error","data","Player_Query","temp_arr","filter","item","seasonId","teamAbbreviation","slice","length","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,UAAU,GAAGD,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA;;AA6CA,SAASE,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bd,QAAQ,CAACe,YAAD,CAAzC;AAEA,MAAIC,QAAQ,GAAG,EAAf;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACc,OAAL,EAAc;AACVI,MAAAA,QAAQ,GAAGF,IAAI,CAAC,eAAD,CAAJ,CAAsBG,MAAtB,CAA8BC,IAAD,IACnCA,IAAI,CAACC,QAAL,KAAkB,SAAlB,IAA+BD,IAAI,CAACE,gBAAL,KAA0B,KAA1D,IACAF,IAAI,CAACC,QAAL,KAAkB,SAFX,CAAX;AAIAd,MAAAA,cAAc,CAACW,QAAQ,CAACK,KAAT,CAAeL,QAAQ,CAACM,MAAT,GAAkB,CAAjC,EAAoCN,QAAQ,CAACM,MAA7C,CAAD,CAAd;AACAf,MAAAA,aAAa,CAACO,IAAI,CAAC,YAAD,CAAL,CAAb;AACAL,MAAAA,aAAa,CAACK,IAAI,CAAC,cAAD,CAAL,CAAb;AACAH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GAXQ,EAWN,CAACG,IAAD,EAAOJ,OAAP,CAXM,CAAT;AAaA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACU,OAAQ,EAA/B;AACX,sBACI;AAAK,IAAA,SAAS,EAAG,eAAjB;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA5BQpB,K;UAK4BH,Q;;;KAL5BG,K;AA8BT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst Game_Query = gql`\n    query GameQuery {\n        scoreboard {\n        gameHeader {\n        gameDateEst\n        gameSequence\n        gameId\n        gameStatusId\n        gameStatusText\n        gamecode\n        homeTeamId\n        visitorTeamId\n        season\n        livePeriod\n        livePcTime\n        livePeriodTimeBcast\n        }\n        lineScore {\n        gameDateEst\n        gameSequence\n        gameId\n        teamId\n        teamAbbreviation\n        teamCityName\n        teamWinsLosses\n        ptsQtr1\n        ptsQtr2\n        ptsQtr3\n        ptsQtr4\n        ptsOt1\n        ptsOt2\n        ptsOt3\n        ptsOt4\n        pts\n        fgPct\n        ftPct\n        fg3Pct\n        ast\n        reb\n        tov\n        }\n    }\n    }\t\n`\n\nfunction Games() {\n    const [seasonStats, setSeasonStats] = useState([])\n    const [playerInfo, setPlayerInfo] = useState([])\n    const [playerData, setPlayerData] = useState([])\n    const [updated, setUpdated] = useState(false)\n    const { loading, error, data } = useQuery(Player_Query);\n    \n    var temp_arr = []\n    useEffect(() => {\n        if (!loading) {\n            temp_arr = data['historicStats'].filter((item) =>\n                (item.seasonId === \"2020-21\" && item.teamAbbreviation === \"TOT\") || \n                item.seasonId !== \"2020-21\"\n            )\n            setSeasonStats(temp_arr.slice(temp_arr.length - 3, temp_arr.length))\n            setPlayerInfo(data['playerInfo'])\n            setPlayerData(data['currentStats'])\n            setUpdated(true);\n        }\n    }, [data, updated]);\n    \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n    return (\n        <div className = \"gameDashboard\">\n            <h1> Today's Games </h1>\n        </div>\n    )\n}\n\nexport default Games\n"]},"metadata":{},"sourceType":"module"}